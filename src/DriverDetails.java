
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author MY PC
 */
public class DriverDetails extends javax.swing.JFrame {

    /**
     * Creates new form DriverDetails
     */
    public DriverDetails() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name");

        jLabel2.setText("Number");

        jLabel3.setText("Car Number");

        jLabel4.setText("Rating");

        jLabel9.setText("Distance");

        jLabel11.setText("Fare");

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Start Trip");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel13.setText("Time");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 43, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
this.setVisible(false);
    new LoginPage().setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
String JsonFilePath = "E:\\Projects\\Swing\\CabBooking\\user.json";
            JSONParser jsonParser = new JSONParser();
 int time = 0;
 String aid = " ";
 String st1 = " ",end1 = " ";
  try{
      
            Reader id = new FileReader("uid.json");
            JSONParser uidParser = new JSONParser();
            JSONObject uidO = (JSONObject) jsonParser.parse(id);
            Reader filereader = new FileReader("drivers.json");
            id.close();
            //JSONObject jsonObject = (JSONObject) jsonParser.parse(filereader);
            JSONArray a = (JSONArray) jsonParser.parse(filereader);
            filereader.close();
            filereader = new FileReader("trips.json");
            id = new FileReader("location.json");
            String s = (String)uidO.get("aid");
            aid  =s;
            
            for(Object o : a)
                {
                    JSONObject person = (JSONObject) o;
                    if(s.equals((String)person.get("rider")))
                    {
                        jLabel5.setText((String)person.get("name"));
                        jLabel6.setText((String)person.get("number"));
                        jLabel7.setText((String)person.get("vid"));
                        jLabel8.setText((String)person.get("rating"));
                        break;
                    }
            }
            a = (JSONArray) jsonParser.parse(filereader);
            JSONArray a1 = (JSONArray) jsonParser.parse(id);
            for(Object o : a)
                {
                    JSONObject person = (JSONObject) o;
                    if(s.equals((String)person.get("id")))
                    {
                        int x = 0,y = 0,x1 = 0,y1 = 0;
                        int sw = 0;
                        for(Object p :a1)
                        {
                            JSONObject loc = (JSONObject) p;
                            String st = (String)person.get("st");
                            st1 = st;
                            String end = (String)person.get("end");
                            end1 = end;
                            if(st.equals((String)loc.get("lname")))
                            {
                                x = Integer.parseInt((String)loc.get("x"));
                                y = Integer.parseInt((String)loc.get("y"));
                                sw++;
                            }
                            if(end.equals((String)loc.get("lname")))
                            {
                                x1 = Integer.parseInt((String)loc.get("x"));
                                y1 = Integer.parseInt((String)loc.get("y"));
                                sw++;
                            }
                            if(sw==2){
                                if(x1>x)
                                    x = x1-x;
                                else
                                    x= x-x1;
                                if(y1>y)
                                    y = y1-y;
                                else
                                    y= y-y1;
                                x = x+y;
                                x = x/50;
                                jLabel10.setText(Integer.toString(x) + "km");
                                x = 30 + 5*x;
                                jLabel12.setText("Rs" + Integer.toString(x));
                                x = x - 30;
                                time = x;
                                jLabel14.setText(Integer.toString(x)+ "min");
                                break;
                                
                            }
                        }
                        break;
                    }
            }
}catch (FileNotFoundException e) {
            System.out.println("YES1");
        } catch (IOException e) {
            System.out.println("YES2");}
         catch (ParseException e ) {
            System.out.println("YES3");
        }
  
            NewThread nt = new NewThread(time,st1,end1,aid);
            nt.z.start();
            /*
try {
Thread.sleep(time*1000);
try{
      
            Reader id = new FileReader("user.json");
            JSONParser uidParser = new JSONParser();
            JSONArray uidO = (JSONArray) jsonParser.parse(id);
            Reader filereader = new FileReader("drivers.json");
            id.close();
            //JSONObject jsonObject = (JSONObject) jsonParser.parse(filereader);
            JSONArray a = (JSONArray) jsonParser.parse(filereader);
            JSONArray a1 = new JSONArray();
            filereader.close();
            filereader = new FileReader("trips.json");
            id = new FileReader("location.json");      
            for(Object o : a)
                {
                    JSONObject person = (JSONObject) o;
                    if(aid.equals((String)person.get("rider")))
                    {
                       person.put("location",end1);
                       person.put("rider","none");
                       a1.add(person);
                       
                    }
                    else
                        a1.add(person);
            }
            FileWriter idw;
            idw = new FileWriter("drivers.json", false);
            idw.write(a1.toJSONString());
            idw.close();
            a1 = new JSONArray();
            for(Object o : uidO)
                {
                    JSONObject person = (JSONObject) o;
                    if(aid.equals((String)person.get("UserID")))
                    {
                       person.put("status","N");
                       a1.add(person);
                       
                    }
                    else
                        a1.add(person);
            }
            idw = new FileWriter("user.json", false);
            idw.write(a1.toJSONString());
            idw.close();
            a1 = new JSONArray();
            a = (JSONArray) jsonParser.parse(filereader);
            for(Object o : a)
                {
                    JSONObject person = (JSONObject) o;
                    if(!aid.equals((String)person.get("id")))
                    {
                        a1.add(person);
                        
                        }
                        
                    }
            idw = new FileWriter("trips.json", false);
            idw.write(a1.toJSONString());
            idw.close();
            
            }
catch (FileNotFoundException e) {
            System.out.println("YES1");
        } catch (IOException e) {
            System.out.println("YES2");}
         catch (ParseException e ) {
            System.out.println("YES3");
        }

}
catch (InterruptedException e){
}*/// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DriverDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DriverDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DriverDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DriverDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DriverDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
class NewThread implements Runnable {
    Thread z;
    int time;
    String s1 = " ",end1 = " ",aid= " ";
    NewThread(int t1,String s11,String end11,String aid1){
        z = new Thread(this,"demo");
        time = t1;
        s1 = s11;
        end1 = end11;
        aid = aid1;
    }
    public void run(){
        try {
Thread.sleep(time*1000);
try{
    JSONParser jsonParser = new JSONParser();
      
            Reader id = new FileReader("user.json");
            JSONParser uidParser = new JSONParser();
            JSONArray uidO = (JSONArray) jsonParser.parse(id);
            Reader filereader = new FileReader("drivers.json");
            id.close();
            //JSONObject jsonObject = (JSONObject) jsonParser.parse(filereader);
            JSONArray a = (JSONArray) jsonParser.parse(filereader);
            JSONArray a1 = new JSONArray();
            filereader.close();
            filereader = new FileReader("trips.json");
            id = new FileReader("location.json");      
            for(Object o : a)
                {
                    JSONObject person = (JSONObject) o;
                    if(aid.equals((String)person.get("rider")))
                    {
                       person.put("location",end1);
                       person.put("rider","none");
                       a1.add(person);
                       
                    }
                    else
                        a1.add(person);
            }
            FileWriter idw;
            idw = new FileWriter("drivers.json", false);
            idw.write(a1.toJSONString());
            idw.close();
            a1 = new JSONArray();
            for(Object o : uidO)
                {
                    JSONObject person = (JSONObject) o;
                    if(aid.equals((String)person.get("UserID")))
                    {
                       person.put("status","N");
                       int rb = Integer.parseInt((String)person.get("balance"));
                       rb = rb - time - 30;
                       person.put("balance",Integer.toString(rb));
                       a1.add(person);
                       
                    }
                    else
                        a1.add(person);
            }
            idw = new FileWriter("user.json", false);
            idw.write(a1.toJSONString());
            idw.close();
            a1 = new JSONArray();
            a = (JSONArray) jsonParser.parse(filereader);
            for(Object o : a)
                {
                    JSONObject person = (JSONObject) o;
                    if(!aid.equals((String)person.get("id")))
                    {
                        a1.add(person);
                        
                        }
                        
                    }
            idw = new FileWriter("trips.json", false);
            idw.write(a1.toJSONString());
            idw.close();
            
            }
catch (FileNotFoundException e) {
            System.out.println("YES1");
        } catch (IOException e) {
            System.out.println("YES2");}
         catch (ParseException e ) {
            System.out.println("YES3");
        }

}
catch (InterruptedException e){
}
    }
    
}
